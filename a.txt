Bonus/%.o: Bonus/%.c $(headers) $(libft_DIR_B)/libft.h
	@$(CC) $(CFLAGS) -c $< -o $@

    add _B to $(headers)



---------------------------------

int	ft_execution(t_token *data, t_extra *x)
{
	int	a;

	a = 0;

..
}

remove unused variable

---------------------------------

free the herdoc line befor break , and maybe in the signall function ??

---------------------------------

add strjoin_4 in utils and includs

---------------------------------

change this in ft_qouts :

	if (ptr->f != 0 || (ptr->prev && ptr->prev->type == heredoc_t))

---------------------------------

char	*ft_strjoin4(char **s1)
{
	char	*t;
	int		s;
	int		i;
	int		j;

	if (!s1)
		return (NULL);
	i = 0;
	s = 0;
	while (s1[i])
		s += ft_strlen(s1[i++]);
	t = malloc(s + 1);
	if (!t)
		return (NULL);
	i = 0;
	s = 0;
	while (s1[i])
	{
		j = 0;
		while (s1[i][j])
			t[s++] = s1[i][j++];
		i++;
	}
	t[s] = '\0';
	return (t);
}

char	*ft_filter_exp(t_extra *x, char *str, int f1, int f2)
{
	char	**t;
	char	*tmp;

	int (s), i = 0;
	t = ft_split4(str);
	if (!t)
		return (NULL);
	s = ft_strlen_2(t);
	while (t[i])
	{
		printf("> we are in %d : %s <\n", i + 1, t[i]);
		f1 = ft_check_q_status(t[i]);
		f2 = ft_check_dollar(t[i]);
		tmp = ft_strdup(t[i]);
		if (!tmp)
			return (ft_free2(t, s), NULL);
		if (f2 == 1)
		{
			// printf("> dollar in %d <\n", i + 1);
			free(t[i]);
			t[i] = NULL;
			t[i] = ft_swap_value(0, tmp, x, 0);
			if (!t[i])
				return (ft_free2(t, s), NULL);
			if (f1 != 0)
			{
				t[i] = ft_remove_q(t[i]);
				if (!t[i])
					return (ft_free2(t, s), NULL);
			}
		}
		else
		{
			printf("> no dollar in %d <\n", i + 1);
			t[i] = ft_remove_q(t[i]);
			if (!t[i])
				return (ft_free2(t, s), NULL);
		}
		free(tmp);
		i++;
	}
	return (ft_strjoin4(t));
}

int	ft_expanding_list(t_token **data, t_extra *x)
{
	char	*t;
	t_token	*ptr;

	ptr = *data;
	while (ptr->type != end_t)
	{
		if (!ptr->prev || (ptr->prev && ptr->prev->type != heredoc_t))
		{
			if (ft_check_dollar(ptr->value))
			{
				ptr->f = 1;
				t = ft_strdup(ptr->value);
				if (!t)
					return (-1);
				free(ptr->value);
				ptr->value = ft_filter_exp(x,t,0,0);
				if (!ptr->value)
					return (free(t), -1);
				free(t);
			}
		}
		ptr = ptr->next;
	}
	return (0);
}

---------------------------------


---------------------------------


---------------------------------

